{"ast":null,"code":"import { utilService } from \"./utilService.js\";\nconst gData = [];\nexport const storageService = {\n  query,\n  post\n}; //LIST\n\nasync function query(entityType, filterBy) {\n  let entities = (await JSON.parse(localStorage.getItem(entityType))) || [];\n\n  if (!entities || !entities.length) {\n    entities = gData;\n\n    _save(entityType, entities);\n  }\n\n  return entities;\n} //ADD\n\n\nasync function post(entityType, newEntity) {\n  newEntity._id = utilService.makeId();\n  const entities = await query(entityType);\n  entities.push(newEntity);\n\n  _save(entityType, entities);\n\n  return entities;\n} //SAVE TO STORAGE\n\n\nfunction _save(entityType, entities) {\n  localStorage.setItem(entityType, JSON.stringify(entities));\n}","map":{"version":3,"sources":["/Users/dana/Desktop/spling/Frontend/src/services/order-storage.service.js"],"names":["utilService","gData","storageService","query","post","entityType","filterBy","entities","JSON","parse","localStorage","getItem","length","_save","newEntity","_id","makeId","push","setItem","stringify"],"mappings":"AAAA,SACIA,WADJ,QAEO,kBAFP;AAGA,MAAMC,KAAK,GAAG,EAAd;AAEA,OAAO,MAAMC,cAAc,GAAG;AAC1BC,EAAAA,KAD0B;AAE1BC,EAAAA;AAF0B,CAAvB,C,CAIP;;AACA,eAAeD,KAAf,CAAqBE,UAArB,EAAiCC,QAAjC,EAA2C;AACvC,MAAIC,QAAQ,GAAG,OAAMC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBN,UAArB,CAAX,CAAN,KAAsD,EAArE;;AACA,MAAI,CAACE,QAAD,IAAa,CAACA,QAAQ,CAACK,MAA3B,EAAmC;AAC/BL,IAAAA,QAAQ,GAAGN,KAAX;;AACFY,IAAAA,KAAK,CAACR,UAAD,EAAaE,QAAb,CAAL;AACD;;AACD,SAAOA,QAAP;AACH,C,CACD;;;AACA,eAAeH,IAAf,CAAoBC,UAApB,EAAgCS,SAAhC,EAA2C;AACvCA,EAAAA,SAAS,CAACC,GAAV,GAAgBf,WAAW,CAACgB,MAAZ,EAAhB;AACA,QAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACE,UAAD,CAA5B;AACAE,EAAAA,QAAQ,CAACU,IAAT,CAAcH,SAAd;;AACCD,EAAAA,KAAK,CAACR,UAAD,EAAaE,QAAb,CAAL;;AACD,SAAOA,QAAP;AACH,C,CACD;;;AACA,SAASM,KAAT,CAAeR,UAAf,EAA2BE,QAA3B,EAAqC;AACjCG,EAAAA,YAAY,CAACQ,OAAb,CAAqBb,UAArB,EAAiCG,IAAI,CAACW,SAAL,CAAeZ,QAAf,CAAjC;AACH","sourcesContent":["import {\n    utilService\n} from \"./utilService.js\";\nconst gData = [];\n\nexport const storageService = {\n    query,\n    post,\n};\n//LIST\nasync function query(entityType, filterBy) {\n    let entities = await JSON.parse(localStorage.getItem(entityType)) || [];\n    if (!entities || !entities.length) {\n        entities = gData;\n      _save(entityType, entities);\n    }\n    return entities;\n}\n//ADD\nasync function post(entityType, newEntity) {\n    newEntity._id = utilService.makeId();\n    const entities = await query(entityType);\n    entities.push(newEntity);\n     _save(entityType, entities);\n    return entities;\n}\n//SAVE TO STORAGE\nfunction _save(entityType, entities) {\n    localStorage.setItem(entityType, JSON.stringify(entities));\n}"]},"metadata":{},"sourceType":"module"}